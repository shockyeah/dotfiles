# パッケージ管理
[[plugins]]
repo = 'Shougo/dein.vim'

# 自動補完
[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = ''' " {{{
    " 起動時にneocompleteを有効化する
    let g:neocomplete#enable_at_startup = 1
    " 大文字・小文字を区別せずに補完する
    let g:neocomplete#enable_smart_case = 1
    " 3文字以上入力すると補完する
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    " Tabで補完候補を選択する
    inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    " 各ファイルタイプのオムニ補完を有効化
    augroup OmniCompletionNeocompleteCommands
      autocmd!
      autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
      autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
      autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
      autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
      autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END
''' # }}}

# スニペット補完 順:C+n 逆:C+p
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['Shougo/neocomplete.vim']
hook_add = ''' " {{{
    " Returnキーでスニペットを展開
    imap <expr><CR> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" :
      \ "\<CR>"
''' # }}}

# スニペット集
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# 非同期コマンド実行プラグイン
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = ''' " {{{
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
''' # }}}

# データ選択インターフェース
[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc.vim']
hook_add = ''' " {{{
    " Prefix keyをSpaceに
    nmap <Space> [unite]
    " Esc2回でUniteウィンドウを閉じる
    autocmd FileType unite,vimfiler nnoremap <buffer> <silent> <ESC><ESC> :q<CR>
    autocmd FileType unite,vimfiler inoremap <buffer> <silent> <ESC><ESC> <ESC>:q<CR>
    " Uniteのステータスラインを自前のものにする
    let g:unite_force_overwrite_statusline = 0
    " grepにptやagが使用可能な場合はそちらを使用する
    if executable('pt')
        let g:unite_source_grep_command = 'pt'
        let g:unite_source_grep_default_opts = '--nogroup --nocolor'
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('ag')
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts = '-i --vimgrep --hidden --ignore' .
          \ ' ''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' '
        let g:unite_source_grep_recursive_opt = ''
    endif
    " Space+ggでカレントバッファのディレクトリ内をgrepまたはgit grep
    nnoremap <silent> [unite]gg :<C-u>call <SID>unite_smart_grep_buffer_dir()<CR>
    function! s:unite_smart_grep_buffer_dir()
        if system('git rev-parse --is-inside-work-tree') == "true\n"
          exec ':Unite grep/git:' . expand('%:h')
        else
          exec ':Unite grep:' . expand('%:h')
        endif
    endfunction
''' # }}}

# 文脈からファイルタイプを推測する
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# 最近使ったファイル表示
[[plugins]]
repo = 'Shougo/neomru.vim'

# vim上で実行できるシェル
[[plugins]]
repo = 'Shougo/vimshell'

# Node.js入力補完 C+x or C+o
[[plugins]]
repo = 'myhere/vim-nodejs-complete'

# カーソル位置の文脈でファイルタイプを変更
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# ステータスラインのデコレート
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = ''' " {{{
    let g:lightline = {
        \     'colorscheme': 'wombat',
        \     'active': {
        \         'left': [
        \             ['mode', 'paste'],
        \             ['readonly', 'filename', 'modified']
        \         ],
        \         'right': [
        \             ['lineinfo'],
        \             ['persent'],
        \             ['fileformat', 'fileencoding', 'filetype']
        \         ]
        \     },
        \     'component_function': {
        \         'filename': 'VimrcLightLineFileName'
        \     },
        \     'component_expand': {
        \         'readonly': 'VimrcLightLineReadOnly'
        \     },
        \     'component_type': {
        \         'readonly': 'error'
        \     }
        \ }
    
    " helpなど自明な場合以外はわかりやすくReadOnlyを表示
    function! VimrcLightLineReadOnly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'RO' : ''
    endfunction
    " 通常ファイル表示ではファイルパスを表示
    function! VimrcLightLineFileName()
        if &ft == 'vimfiler'
            return vimfiler#get_status_string()
        elseif &ft == 'unite'
            return unite#get_status_string()
        elseif expand('%') == ''
            return '[No Name]'
        else
            return expand('%')
        endif
    endfunction
''' # }}}

# フォルダ移動
[[plugins]]
repo = 'scrooloose/nerdtree'

# vim上でNode.js実行 \r
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'w0ng/vim-hybrid'

